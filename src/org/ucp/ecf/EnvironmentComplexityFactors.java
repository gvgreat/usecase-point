//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in
// JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2010.03.16 at 03:34:55 PM IST
//

package org.ucp.ecf;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.xml.bind.JAXBException;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.i18n.swing.util.Messages;
import org.i18n.swing.util.Utils;
import org.table.control.AbstractXMLTableDataModel;

/**
 * <p>
 * Java class for anonymous complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base=&quot;{http://www.w3.org/2001/XMLSchema}anyType&quot;&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref=&quot;{}environment-factor&quot; maxOccurs=&quot;unbounded&quot;/&gt;
 *         &lt;element ref=&quot;{}total-value&quot;/&gt;
 *         &lt;element ref=&quot;{}calculated-ecf&quot;/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@SuppressWarnings("serial")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = { "environmentFactor", "totalValue", "calculatedEcf" })
@XmlRootElement(name = "environment-complexity-factors")
public class EnvironmentComplexityFactors extends AbstractXMLTableDataModel<EnvironmentFactor> {

  @XmlElement(name = "environment-factor", required = true)
  protected List<EnvironmentFactor> environmentFactor;
  @XmlElement(name = "total-value")
  protected double totalValue;
  @XmlElement(name = "calculated-ecf")
  protected double calculatedEcf;

  @SuppressWarnings("boxing")
  public EnvironmentComplexityFactors() {
    editableMap.put("calculatedFactor", false); //$NON-NLS-1$
  }

  /**
   * Gets the value of the environmentFactor property.
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
   * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
   * the environmentFactor property.
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
   * getEnvironmentFactor().add(newItem);
   * </pre>
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link EnvironmentFactor }
   */
  public List<EnvironmentFactor> getEnvironmentFactor() {
    if (environmentFactor == null) {
      environmentFactor = new ArrayList<EnvironmentFactor>();
    }
    return this.environmentFactor;
  }

  /**
   * Gets the value of the totalValue property.
   */
  @Override
  public double getTotalValue() {
    double sum = 0;
    for (EnvironmentFactor factor : environmentFactor) {
      sum += factor.getCalculatedFactor();
    }
    setTotalValue(sum);
    return sum;
  }

  /**
   * Sets the value of the totalValue property.
   */
  public void setTotalValue(double value) {
    this.totalValue = value;
  }

  /**
   * Gets the value of the calculatedEcf property.
   */
  public double getCalculatedEcf() {
    setCalculatedEcf(1.4 + (-0.03 * totalValue));
    return calculatedEcf;
  }

  /**
   * Sets the value of the calculatedEcf property.
   */
  public void setCalculatedEcf(double value) {
    this.calculatedEcf = value;
  }

  /*
   * (non-Javadoc)
   * @see org.table.control.TableElement#addRow(java.lang.Object)
   */
  @Override
  public void addRow(EnvironmentFactor row) throws JAXBException {
    if (environmentFactor.contains(row)) {
      throw new JAXBException(new Exception(MessageFormat
          .format(Messages.getString("row.already.exists"), row.getFactor()))); //$NON-NLS-1$
    }
    environmentFactor.add(row);
  }

  /*
   * (non-Javadoc)
   * @see org.table.control.TableElement#getAllRows()
   */
  @Override
  public List<EnvironmentFactor> getAllRows() {
    return environmentFactor;
  }

  /*
   * (non-Javadoc)
   * @see org.table.control.TableElement#getColumnNames()
   */
  @Override
  public List<String> getColumnNames() {
    return Arrays.asList(Utils.getValuesCapitalized(getTypeClass().getAnnotation(XmlType.class).propOrder()));
  }

  /*
   * (non-Javadoc)
   * @see org.table.control.TableElement#removeRow(java.lang.Object)
   */
  @Override
  public boolean removeRow(EnvironmentFactor row) {
    return environmentFactor.remove(row);
  }

  /*
   * (non-Javadoc)
   * @see org.table.control.TableElement#updateRow(java.lang.Object)
   */
  @Override
  public void updateRow(EnvironmentFactor row) {
    int index = environmentFactor.indexOf(row);
    environmentFactor.set(index, row);
  }

  /*
   * (non-Javadoc)
   * @see org.table.control.AbstractTableDataModel#getElement()
   */
  @Override
  public EnvironmentFactor getNewElement() {
    return new EnvironmentFactor();
  }

  /*
   * (non-Javadoc)
   * @see org.table.control.XMLTableDataModel#displayData()
   */
  @Override
  public String displayData() {
    StringBuilder builder = new StringBuilder();
    builder.append("ECF (1.4 + (-0.03*Total Factor)) = "); //$NON-NLS-1$
    builder.append(getCalculatedEcf());
    return builder.toString();
  }

  /*
   * (non-Javadoc)
   * @see org.table.control.XMLTableDataModel#getTypeClass()
   */
  @Override
  public Class<? extends EnvironmentFactor> getTypeClass() {
    return EnvironmentFactor.class;
  }
  
  /*
   * (non-Javadoc)
   * @see org.table.control.XMLTableDataModel#getCalculatedValue()
   */
  @Override
  public double getCalculatedValue() {
    return getCalculatedEcf();
  }
}
